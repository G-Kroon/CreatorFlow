import React from "react";
import { base44 } from "@/api/base44Client";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Instagram, Youtube, Twitter } from "lucide-react";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from "recharts";

const platformIcons = {
  instagram: Instagram,
  youtube: Youtube,
  twitter: Twitter,
  tiktok: ({ className }) => (
    <svg className={className} viewBox="0 0 24 24" fill="currentColor">
      <path d="M19.59 6.69a4.83 4.83 0 01-3.77-4.25V2h-3.45v13.67a2.89 2.89 0 01-5.2 1.74 2.89 2.89 0 012.31-4.64 2.93 2.93 0 01.88.13V9.4a6.84 6.84 0 00-1-.05A6.33 6.33 0 005 20.1a6.34 6.34 0 0010.86-4.43v-7a8.16 8.16 0 004.77 1.52v-3.4a4.85 4.85 0 01-1-.1z"/>
    </svg>
  )
};

const platformColors = {
  instagram: "from-pink-500 to-purple-600",
  tiktok: "from-gray-800 to-gray-900",
  youtube: "from-red-500 to-red-700",
  twitter: "from-blue-400 to-blue-600",
  linkedin: "from-blue-600 to-blue-800",
  facebook: "from-blue-500 to-blue-700"
};

export default function Analytics() {
  const { data: metrics = [] } = useQuery({
    queryKey: ['audience_metrics'],
    queryFn: () => base44.entities.AudienceMetric.list('-date'),
  });

  const platformMetrics = metrics.reduce((acc, m) => {
    if (!acc[m.platform]) {
      acc[m.platform] = [];
    }
    acc[m.platform].push(m);
    return acc;
  }, {});

  const totalFollowers = metrics.reduce((sum, m) => sum + (m.followers || 0), 0);
  const avgEngagement = metrics.length > 0 
    ? (metrics.reduce((sum, m) => sum + (m.engagement_rate || 0), 0) / metrics.length).toFixed(2)
    : 0;

  return (
    <div className="p-6 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Audience Analytics</h1>
          <p className="text-gray-500">Track your audience growth and engagement across platforms</p>
        </div>

        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <Card className="bg-gradient-to-br from-indigo-500 to-purple-600 text-white">
            <CardContent className="p-6">
              <p className="font-medium opacity-90 mb-2">Total Followers</p>
              <h3 className="text-4xl font-bold">{totalFollowers.toLocaleString()}</h3>
            </CardContent>
          </Card>

          <Card className="bg-white/80 backdrop-blur-sm border-gray-200/60">
            <CardContent className="p-6">
              <p className="font-medium text-gray-600 mb-2">Average Engagement</p>
              <h3 className="text-4xl font-bold text-indigo-600">{avgEngagement}%</h3>
            </CardContent>
          </Card>
        </div>

        <div className="grid lg:grid-cols-2 gap-6">
          {Object.entries(platformMetrics).map(([platform, data]) => {
            const Icon = platformIcons[platform] || Instagram;
            const latest = data[0];
            const growthData = data.slice(0, 10).reverse();

            return (
              <Card key={platform} className="bg-white/80 backdrop-blur-sm border-gray-200/60">
                <CardHeader className="border-b border-gray-100">
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-3 capitalize">
                      <div className={`p-2 rounded-xl bg-gradient-to-br ${platformColors[platform]}`}>
                        <Icon className="w-5 h-5 text-white" />
                      </div>
                      {platform}
                    </CardTitle>
                    <div className="text-right">
                      <p className="text-2xl font-bold">{latest?.followers?.toLocaleString()}</p>
                      <p className="text-xs text-gray-500">followers</p>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="p-6">
                  <div className="grid grid-cols-3 gap-4 mb-6">
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Engagement</p>
                      <p className="text-lg font-semibold">{latest?.engagement_rate}%</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Avg Views</p>
                      <p className="text-lg font-semibold">{latest?.avg_views?.toLocaleString() || '-'}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 mb-1">Avg Likes</p>
                      <p className="text-lg font-semibold">{latest?.avg_likes?.toLocaleString() || '-'}</p>
                    </div>
                  </div>

                  <ResponsiveContainer width="100%" height={200}>
                    <LineChart data={growthData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="date" tick={{ fontSize: 12 }} />
                      <YAxis tick={{ fontSize: 12 }} />
                      <Tooltip />
                      <Line type="monotone" dataKey="followers" stroke="#6366F1" strokeWidth={2} />
                    </LineChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {metrics.length === 0 && (
          <Card className="p-12 text-center border-dashed">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">No analytics data yet</h3>
            <p className="text-gray-500">Start tracking your audience metrics to see insights here</p>
          </Card>
        )}
      </div>
    </div>
  );
}
